%{

#include <stdio.h>

#include <stdlib.h>



int yylex();

int yyerror(char *);



extern FILE* yyin;



int yydebug = 1;



int getNextNumber()

{

   static int nextNumber=-1;

   return ++nextNumber;

}



%}



%union {

  int num;

  char* id;

  int etiq;

}



%token <num> NUM

%token <id> ID

%token PRINT DO FOR IF READ WHILE FROM TO BY ELSE ASIGNACION ADD_ASSIG SUB_ASSIG MUL_ASSIG DIV_ASSIG ADD SUB MUL DIV



%%



stmts: stmt ';' stmts   

     | stmt

     ;



stmt: loop

    | cond

    | assig

    | io

    ;





loop:

    DO 

    {$<etiq>$=getNextNumber();}

    {printf("LBL%d:\n",$<etiq>2);}

    stmts 

    WHILE 

    '(' expr ')' 

    {$<etiq>$=getNextNumber();}

    {printf("\tsifalsovea LBL %d\n",$<etiq>9);}

    {printf("\tvea LBL %d\n",$<etiq>2);}

    {printf("LBL%d:\n",$<etiq>9);}

    

    

    | FOR '(' ID impValori FROM expr TO NUM ')' 

    etiquetaInicio 

    etiquetaFinal 

    {printf("\tasigna\n");}

    '{' {printf("LBL%d:\n",$<etiq>10);} stmts '}' 

    imprimeSinByNum  

    

    | FOR '(' ID impValori FROM expr TO NUM BY NUM ')' 

    etiquetaInicio 

    etiquetaFinal 

    {printf("\tasigna\n");}

    '{' {printf("LBL%d:\n",$<etiq>12);} stmts '}' 

    imprimeConByNum  

    ;



impValori:

    {printf("\tvalori %s\n", $<id>0);}

    ;



etiquetaInicio:

    {$<etiq>$=getNextNumber();}

    ;

    

etiquetaFinal:

    {$<etiq>$=getNextNumber();}

    ;



imprimeSinByNum:

    {printf("\tvalori %s\n", $<id>-13);}

    {printf("\tvalord %s\n", $<id>-13);}

    {printf("\tmete 1\n");}

    {printf("\tadd\n");}

    {printf("\tasigna\n");}

    {printf("\tmete %d\n",$<num>-8);}

    {printf("\tvalord %s\n", $<id>-13);}

    {printf("\tsub\n");}

    {printf("\tsifalsovea LBL %d\n", $<etiq>-5);}

    {printf("\tvea LBL %d\n", $<etiq>-6);}

    {printf("LBL%d:\n",$<etiq>-5);}

    ;

  

  

imprimeConByNum:

    {printf("\tvalori %s\n", $<id>-15);}

    {printf("\tvalord %s\n", $<id>-15);}

    {printf("\tmete %d\n", $<num>-7);}

    {printf("\tadd\n");}

    {printf("\tasigna\n");}

    {printf("\tmete %d\n",$<num>-9);}

    {printf("\tvalord %s\n", $<id>-15);}

    {printf("\tsub\n");}

    {printf("\tsifalsovea LBL %d\n", $<etiq>-5);}

    {printf("\tvea LBL %d\n", $<etiq>-6);}

    {printf("LBL%d:\n",$<etiq>-5);}

    ;







cond: IF '(' expr ')' { $<etiq>$=getNextNumber(); } { printf("\tsifalsovea LBL%d\n", $<etiq>5); } '{' stmts '}' elseopcional 

      ;



elseopcional:

    ELSE { $<etiq>$=getNextNumber(); printf("\tvea LBL%d\n", $<etiq>$); } { printf("LBL%d:\n", $<etiq>-4); } '{' stmts '}' { printf("LBL%d:\n", $<etiq>2); }

    | { printf("LBL%d:\n", $<etiq>-4); }

    ;



io: PRINT expr { printf("\tprint\n"); }

   | READ ID  { printf("\tread %s\n", $2); }

   ;



assig: ID { printf("\tvalori %s\n", $1); } ASIGNACION  expr { printf("\tasigna \n"); }  

     | ID { printf("\tvalori %s\n", $1); } ADD_ASSIG  { printf("\tvalord %s\n", $1); } expr { printf("\tadd\n"); } { printf("\tasigna\n"); }

     | ID { printf("\tvalori %s\n", $1); } SUB_ASSIG  { printf("\tvalord %s\n", $1); } expr { printf("\tsub\n"); } { printf("\tasigna\n"); }

     | ID { printf("\tvalori %s\n", $1); } MUL_ASSIG  { printf("\tvalord %s\n", $1); } expr { printf("\tmul\n"); } { printf("\tasigna\n"); }

     | ID { printf("\tvalori %s\n", $1); } DIV_ASSIG  { printf("\tvalord %s\n", $1); } expr { printf("\tdiv\n"); } { printf("\tasigna\n"); }

     ;



expr: expr ADD mult { printf("\tadd\n"); }	   

    | expr SUB mult { printf("\tsub\n"); }	   

    | mult

    ;



mult:  mult MUL val { printf("\tmul\n"); }         

     | mult DIV val { printf("\tdiv\n"); }         

     | val

     ;



val: NUM   { printf("\tmete %d\n", $1); }

   | ID	   { printf("\tvalord %s\n", $1); }

   | '(' expr ')'

   ;



%%



int yyerror(char *s){printf("%s\n",s);}

int main(int argc, char **argv){ 

		if(argc > 1) {

				FILE *file;

				file=fopen(argv[1], "r");

				if(!file) {

					fprintf(stderr, "no se puede abrir %s\n", argv[1]);

					exit(1);

				}

				yyin = file;

			} 

			yyparse(); 

	  }


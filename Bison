%{

#include <stdio.h>

#include <stdlib.h>



int yylex();

int yyerror(char *);



extern FILE* yyin;



int yydebug = 1;



int getNextNumber()

{

   static int nextNumber=-1;

   return ++nextNumber;

}



%}



%union {

  int num;

  char* id;

  int etiq;

}



%token <num> NUM

%token <id> ID

%token PRINT DO FOR IF READ WHILE FROM TO BY ELSE ASIGNACION ADD_ASSIG SUB_ASSIG MUL_ASSIG DIV_ASSIG ADD SUB MUL DIV



%%



stmts: stmt ';' stmts   

     | stmt

     ;



stmt: loop

    | cond

    | assig

    | io

    ;



loop: DO {$<etiq>$=getNextNumber(); printf("LBL%d:\n",$<etiq>$); } stmts WHILE '(' expr ')' {$<etiq>$=getNextNumber(); printf("\tsifalsovea LBL%d\n",$<etiq>$); printf("\tvea LBL%d\n",$<etiq>$); printf("LBL%d: \n",$<etiq>$); }

    | FOR '(' ID FROM expr TO NUM ')' '{' stmts '}'

    | FOR '(' ID FROM expr TO NUM BY NUM ')' '{' stmts '}'

    ;



cond: IF '(' expr ')' '{' stmts '}'

    | IF '(' expr ')' '{' stmts '}' ELSE '{' stmts '}'

    ;



io: PRINT expr { printf("\tprint\n"); }

   | READ ID  { printf("\tread %s\n", $2); }

   ;



assig: ID { printf("\tvalori %s (en assig)\n", $1); } ASIGNACION  expr { printf("\tasigna (en assig)\n"); }  

     | ID ADD_ASSIG { printf("\tvalori %s (en assig)\n", $1); } { printf("\tvalord %s\n", $1); } expr { printf("\tadd\n"); } { printf("\tasigna (en assig)\n"); }

     | ID SUB_ASSIG { printf("\tvalori %s (en assig)\n", $1); } { printf("\tvalord %s\n", $1); } expr { printf("\tsub\n"); } { printf("\tasigna (en assig)\n"); }

     | ID MUL_ASSIG { printf("\tvalori %s (en assig)\n", $1); } { printf("\tvalord %s\n", $1); } expr { printf("\tmul\n"); } { printf("\tasigna (en assig)\n"); }

     | ID DIV_ASSIG { printf("\tvalori %s (en assig)\n", $1); } { printf("\tvalord %s\n", $1); } expr { printf("\tdiv\n"); } { printf("\tasigna (en assig)\n"); }

     ;



expr: expr ADD mult { printf("\tadd\n"); }	   // Detr치s de val o delante el add

    | expr SUB mult { printf("\tsub\n"); }	   // Detr치s de val o delante el sub

    | mult

    ;



mult:  mult MUL val { printf("\tmul\n"); }         // Detr치s de val o delante el mul

     | mult DIV val { printf("\tdiv\n"); }         // Detr치s de val o delante el div

     | val

     ;



val: NUM   { printf("\tmete %d\n", $1); }

   | ID	   { printf("\tvalord %s (en val)\n", $1); }

   | '(' expr ')'

   ;



%%



int yyerror(char *s){printf("%s\n",s);}

int main(){ yyparse(); }

